
CFLAGS = -std=c99 -Wall -Wextra $(w_init_override) -O3 -mavx2 -mfma -fopenmp $(dbg) $(profile)
LDFLAGS = $(profile) 

src = $(wildcard *.c)
obj = $(src:.c=.o)
dep = $(obj:.o=.d)  # one dependency file for each source

# dependency library
C_NPY_LIBPATH = ../c_npy
NEURALNET_LIBPATH = ../neuralnet
CALLBACK_LIBPATH = ../callback
OPTIMIZER_LIBPATH = ../optimizer
CFLAGS += -I$(C_NPY_LIBPATH) -I$(NEURALNET_LIBPATH) -I$(CALLBACK_LIBPATH) -I$(OPTIMIZER_LIBPATH)
LDFLAGS += -L$(C_NPY_LIBPATH) -L$(NEURALNET_LIBPATH) -lneuralnet -lc_npy

DEFINES = 
CFLAGS += $(DEFINES)

alib = liboptimizers.a

$(alib): $(obj)
	$(AR) rcs $@ $^

-include $(dep)   # include all dep files in the makefile

# rule to generate a dep file by using the C preprocessor
# (see man cpp for details on the -MM and -MT options)
%.d: %.c
	@$(CPP) $(CFLAGS) $< -MM -MT $(@:.d=.o) >$@

.PHONY: clean
clean:
	$(RM) $(obj) $(alib)

.PHONY: cleandep
cleandep:
	$(RM) $(dep)

.PHONY: install
install: $(alib)
	exit
	mkdir -p $(DESTDIR)$(PREFIX)/lib
	mkdir -p $(DESTDIR)$(PREFIX)/include
	cp $(alib) $(DESTDIR)$(PREFIX)/lib/$(alib)
	cp c_npy.h $(DESTDIR)$(PREFIX)/include/

.PHONY: uninstall
uninstall:
	exit
	$(RM) $(DESTDIR)$(PREFIX)/lib/$(alib)
	$(RM) $(DESTDIR)$(PREFIX)/include/c_npy.h

